{"ast":null,"code":"var _jsxFileName = \"/Users/ingibitr/Documents/Ruby_labs2/Ruby_labs/final_app_v2/app/javascript/components/App.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport Routes from \"../routes/Index\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from '../components/Home';\n\nvar LoginApp = /*#__PURE__*/function (_Component) {\n  _inherits(LoginApp, _Component);\n\n  var _super = _createSuper(LoginApp);\n\n  function LoginApp() {\n    var _this;\n\n    _classCallCheck(this, LoginApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isLoggedIn: false,\n      user: {}\n    };\n\n    _this.handleLogin = function (data) {\n      _this.setState({\n        isLoggedIn: true,\n        user: data.user\n      });\n    };\n\n    _this.handleLogout = function () {\n      _this.setState({\n        isLoggedIn: false,\n        user: {}\n      });\n    };\n\n    _this.loginStatus = function () {\n      // GET API response data\n      // {withCredentials: true}, allows our Rails server to set and read the cookie on the front-end’s browser\n      // always pass this arg\n      // Rails /logged_in, route and its corresponding controller action\n      // App.js component communicates with Rails through this route \n      // If the User is verified in the Rails server, then a logged_in boolean is returned, along with the user object\n      // App.js uses this response data to maintain the logged in status in the front-end\n      axios.get('http://localhost:3001/logged_in', {\n        withCredentials: true\n      }).then(function (response) {\n        if (response.data.logged_in) {\n          _this.handleLogin(response);\n        } else {\n          _this.handleLogout();\n        }\n      })[\"catch\"](function (error) {\n        return console.log('api errors:', error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // keep track of status and request this information every time it’s mounted\n      this.loginStatus();\n    } // app won't render itself to DOM\n    // will serve as our router to render all other components\n    // will also manage the application’s state and authentication status\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // rendering components using render=props\n      // allows us to pass props to the components to be rendered\n      // in this way, we can pass \n      // isLoggedIn state status, handleLogin(), and handleLogout(), \n      // to our components as props\n      // can also pass the User object from state down to the necessary components, not passing User currently\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(BrowserRouter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render(props) {\n          return /*#__PURE__*/React.createElement(Home, Object.assign({}, props, {\n            loggedInStatus: _this2.state.isLoggedIn,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/login\",\n        render: function render(props) {\n          return /*#__PURE__*/React.createElement(Login, Object.assign({}, props, {\n            handleLogin: _this2.handleLogin,\n            loggedInStatus: _this2.state.isLoggedIn,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/signup\",\n        render: function render(props) {\n          return /*#__PURE__*/React.createElement(Signup, Object.assign({}, props, {\n            handleLogin: _this2.handleLogin,\n            loggedInStatus: _this2.state.isLoggedIn,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }\n          }));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }]);\n\n  return LoginApp;\n}(Component);\n\nexport default LoginApp;","map":{"version":3,"sources":["/Users/ingibitr/Documents/Ruby_labs2/Ruby_labs/final_app_v2/app/javascript/components/App.jsx"],"names":["Routes","React","Component","axios","BrowserRouter","Switch","Route","Home","LoginApp","state","isLoggedIn","user","handleLogin","data","setState","handleLogout","loginStatus","get","withCredentials","then","response","logged_in","error","console","log","props"],"mappings":"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","sourcesContent":["\nimport Routes from \"../routes/Index\";\nimport React, { Component } from 'react';\nimport axios from 'axios'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Home from '../components/Home'\n\nclass LoginApp extends Component {\n\n    // use the component’s state to maintain the logged in status of a User\n    // and to store the User data when we request it from the server\n    state = {\n        isLoggedIn: false,\n        user: {}\n    }\n\n    handleLogin = (data) => {\n        this.setState({\n            isLoggedIn: true,\n            user: data.user\n        })\n    }\n\n    handleLogout = () => {\n        this.setState({\n            isLoggedIn: false,\n            user: {}\n        })\n    }\n\n    loginStatus = () => {\n        // GET API response data\n\n        // {withCredentials: true}, allows our Rails server to set and read the cookie on the front-end’s browser\n        // always pass this arg\n\n        // Rails /logged_in, route and its corresponding controller action\n        // App.js component communicates with Rails through this route \n        // If the User is verified in the Rails server, then a logged_in boolean is returned, along with the user object\n        // App.js uses this response data to maintain the logged in status in the front-end\n\n        axios.get('http://localhost:3001/logged_in',\n            { withCredentials: true })\n            .then(response => {\n\n                if (response.data.logged_in) {\n                    this.handleLogin(response)\n                } else {\n                    this.handleLogout()\n                }\n\n            })\n            .catch(error => console.log('api errors:', error))\n    }\n\n    componentDidMount() {\n        // keep track of status and request this information every time it’s mounted\n        this.loginStatus()\n    }\n\n    // app won't render itself to DOM\n    // will serve as our router to render all other components\n    // will also manage the application’s state and authentication status\n\n    render() {\n        // rendering components using render=props\n        // allows us to pass props to the components to be rendered\n        // in this way, we can pass \n        // isLoggedIn state status, handleLogin(), and handleLogout(), \n        // to our components as props\n\n        // can also pass the User object from state down to the necessary components, not passing User currently\n\n        return (\n            <div>\n\n                <BrowserRouter>\n\n                    <Switch>\n\n                        <Route\n                            exact path='/'\n                            render={props => (\n                                <Home {...props} loggedInStatus={this.state.isLoggedIn} />\n                            )}\n                        />\n\n                        <Route\n                            exact path='/login'\n                            render={props => (\n                                <Login {...props} handleLogin={this.handleLogin} loggedInStatus={this.state.isLoggedIn} />\n                            )}\n                        />\n\n                        <Route\n                            exact path='/signup'\n                            render={props => (\n                                <Signup {...props} handleLogin={this.handleLogin} loggedInStatus={this.state.isLoggedIn} />\n                            )}\n                        />\n\n                    </Switch>\n\n                </BrowserRouter>\n\n            </div>\n        );\n    }\n}\n\nexport default LoginApp;\n\n"]},"metadata":{},"sourceType":"module"}